= Simple Mailer Support (padrino-mailer)

=== Overview

This component uses an enhanced version of the excellent <tt>pony</tt> library (vendored) for a powerful but simple
mailer system within Padrino (and Sinatra). There is full support for using an html content type as well as for file attachments.
The MailerPlugin has many similarities to ActionMailer but is much lighterweight and (arguably) easier to use.

=== Usage

Let's take a look at using the MailerPlugin in an application. By default, MailerPlugin uses the built-in sendmail
functionality on the server. However, smtp is also supported using the following configuration:

  Padrino::Mailer::Base.smtp_settings = { 
    :address              => "smtp.gmail.com",
    :port                 => 587,
    :domain               => 'your.host.name',
    :user_name            => '<username>',
    :password             => '<password>',
    :authentication       => 'plain',
    :enable_starttls_auto => true  
  }

Once those have been defined, the default will become smtp delivery unless overwritten in an individual mail definition.

Padrino supports sending any arbitrary email (using either sendmail or smtp) right from your controllers. 
This is ideal for ‘one-off’ emails where the ‘full’ mailer object is simply unnecessary or too heavy for your simple task.

Delivering an email within your controller is simple:

  # app/controllers/session.rb
  post :create do
    email(:to => "john@smith.com", :subject => "Successfully Registered!", :body => "Test Body")
  end
  
This simple helper will accept any of the standard email attributes and deliver your email in a single command. You can also render a template for the body and specify the delivery method:

  # app/controllers/session.rb
  post :create do
    email(:to => "john@smith.com", :subject => "Successfully Registered!", 
          :body => render('email/registered'), :via => :sendmail)
  end

Padrino also supports more structured mailers. We can define a custom mailer using a mailer block.

  # app/mailers/sample_mailer.rb
  MyAppName.mailers :sample do
    email :registration do |name|
      from 'admin@site.com'
      to user_email_address
      subject 'Welcome to the site!'
      body    render('registration', :locals => { :name => name })
      type    'html'             # optional, defaults to plain/text
      charset 'windows-1252'     # optional, defaults to utf-8
      via     :sendmail          # optional, smtp if defined otherwise sendmail
    end
  end

This defines a mail called '<tt>registration_mail</tt>' with the specified attributes for delivery. The <tt>body</tt> method
is invoking the render function passing the <tt>name</tt> attribute to the body message template which is defined in
<tt>[views_path]/mailers/sample/registration_email.erb</tt> as shown below:

  # ./views/mailers/sample/registration_email.erb
  This is the body of the email and can access the <%= name %> that was passed in from the mailer definition
  That's all there is to defining the body of the email which can be plain text or html

Once the mailer definition has been completed and the template has been defined, the email can be sent using:

  deliver(:sample, :registration_email, "Bob", "bob@bobby.com")

And that will then deliver the email according the the configured options. This is all you need to send basic emails.

The mailer also supports the attachment of files and various other options. Be sure to check out the 
{Padrino Mailer}[http://www.padrinorb.com/guides/padrino-mailer] guide for more details on usage.

== Copyright

Copyright (c) 2010 Padrino. See LICENSE for details.